/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "packagecheck/pkg/apis/packagecheck/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PackageCheckLister helps list PackageChecks.
// All objects returned here must be treated as read-only.
type PackageCheckLister interface {
	// List lists all PackageChecks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PackageCheck, err error)
	// PackageChecks returns an object that can list and get PackageChecks.
	PackageChecks(namespace string) PackageCheckNamespaceLister
	PackageCheckListerExpansion
}

// packageCheckLister implements the PackageCheckLister interface.
type packageCheckLister struct {
	indexer cache.Indexer
}

// NewPackageCheckLister returns a new PackageCheckLister.
func NewPackageCheckLister(indexer cache.Indexer) PackageCheckLister {
	return &packageCheckLister{indexer: indexer}
}

// List lists all PackageChecks in the indexer.
func (s *packageCheckLister) List(selector labels.Selector) (ret []*v1.PackageCheck, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PackageCheck))
	})
	return ret, err
}

// PackageChecks returns an object that can list and get PackageChecks.
func (s *packageCheckLister) PackageChecks(namespace string) PackageCheckNamespaceLister {
	return packageCheckNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PackageCheckNamespaceLister helps list and get PackageChecks.
// All objects returned here must be treated as read-only.
type PackageCheckNamespaceLister interface {
	// List lists all PackageChecks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PackageCheck, err error)
	// Get retrieves the PackageCheck from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.PackageCheck, error)
	PackageCheckNamespaceListerExpansion
}

// packageCheckNamespaceLister implements the PackageCheckNamespaceLister
// interface.
type packageCheckNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PackageChecks in the indexer for a given namespace.
func (s packageCheckNamespaceLister) List(selector labels.Selector) (ret []*v1.PackageCheck, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PackageCheck))
	})
	return ret, err
}

// Get retrieves the PackageCheck from the indexer for a given namespace and name.
func (s packageCheckNamespaceLister) Get(name string) (*v1.PackageCheck, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("packagecheck"), name)
	}
	return obj.(*v1.PackageCheck), nil
}
